#!/system/bin/sh

cat << CTAG
{
    name:ADVANCED,
    elements:[
      { SPane:{
		title:"Low Memory Killer",
		description:" LMK Minfree controls how much memory each app type can hold, and is responsible for memory management for multitasking; all values are multiplied by 256 pages."
      }},
`
	for LMK in 1 2 3 4 5 6; do
		echo '{ SSeekBar:{ '
			case $LMK in
			1)
				echo 'title:"Foreground App"' ;;
			2)
				echo 'title:"Visible App"' ;;
			3)
				echo 'title:"Secondary Server"' ;;
			4)
				echo 'title:"Hidden App"' ;;
			5)
				echo 'title:"Content Provider"' ;;
			6)
				echo 'title:"Empty App"' ;;
			esac
			echo ', action:"minfree '${LMK}'",
			min:10, max:200 }},'
	done
`
      { SPane:{
		title:"LMK Whitelist",
		description:" Allows certain apps to be exempt from being killed until absolutely necessary to avoid out-of-memory (OOM)."
      }},
	{ SDescription:{
		description:" "
	}},
	{ SCheckBox:{
                label:"Do-Not-Kill System Processes List",
                default:`cat /sys/module/lowmemorykiller/parameters/donotkill_sysproc`,
                action:"generic /sys/module/lowmemorykiller/parameters/donotkill_sysproc"
        }},
	{ SOptionList:{
		title:"Exempt System Processes",
		action:"whitelist set sys",
		default:`/res/synapse/actions/whitelist set sys`,
		values:[
`
			for SYSPROC in \`/res/synapse/actions/whitelist list sys\`; do
			  echo "\"$SYSPROC\","
			done
`
		]
	}},
	{ SDescription:{
		description:" "
	}},
	{ SCheckBox:{
                label:"Do-Not-Kill User Processes List",
                default:`cat /sys/module/lowmemorykiller/parameters/donotkill_proc`,
                action:"generic /sys/module/lowmemorykiller/parameters/donotkill_proc"
        }},
	{ SDescription:{
		description:" "
	}},
	{ SOptionList:{
		title:"Exempt User Processes",
		action:"whitelist set user",
		default:`/res/synapse/actions/whitelist set user`,
 		values:[
`
			for PROC in \`/res/synapse/actions/whitelist list user\`; do
			  echo "\"$PROC\","
			done
`
		]
	}},
      { SDescription:{
        description:" The process lists above are view only. To add processes, check the Synapse sdcard folder for the parsed files and add one process name per line. Lists updated on reboot.",
      }},
      { SPane:{
		title:"Kernel Entropy"
      }},
	{ SLiveLabel:{
		title:"Entropy Available",
		refresh:1000,
		action:"live entropy"
	}},
	{ SSeekBar:{
		title:"Read Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/read_wakeup_threshold`,
		action:"generic /proc/sys/kernel/random/read_wakeup_threshold"
	}},
	{ SSeekBar:{
		title:"Write Wakeup Threshold",
		max:2048, min:64, step:64,
		default:`cat /proc/sys/kernel/random/write_wakeup_threshold`,
		action:"generic /proc/sys/kernel/random/write_wakeup_threshold"
	}},
	{ SPane:{
		title:"CPU Multicore Power Saving",
		description:"Try to group tasks into the least cores possible. The higher the value, the more aggressive the grouping. With 0 being highest performance and least power savings and level 2 indicating maximum power savings even at the cost of slight performance degradation. Default is 0.",
	}},
	{ SSeekBar:{
		title:"sched_mc_power_savings",
		default:`cat /sys/devices/system/cpu/sched_mc_power_savings`,
		action:"generic /sys/devices/system/cpu/sched_mc_power_savings",
		values:{
			`SMCPS='0:"0: Disabled", 1:"1: Enabled", 2:"2: Aggressive"'
			echo $SMCPS`
		}
	}},
	{ SPane:{
		title:"Gentle Fair Sleepers",
		description:" Sleeper Fairness is a concept used by CFS which treat sleeping/waiting tasks as if they were in a run queue. This implies tasks which spend most of the time waiting for an user input and such will get a fair share of CPU when they need it. Disabling Gentle Fair Sleepers could improve UI responsiveness. Default is Disabled."
	}},
	{ SCheckBox:{
		label:"Enable or Disable Gentle Fair Sleepers",
		default:`cat /sys/kernel/sched/gentle_fair_sleepers`,
		action:"generic /sys/kernel/sched/gentle_fair_sleepers"
	}},
    ]
}
CTAG
